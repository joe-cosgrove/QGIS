/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/processing/qgsprocessingmodelalgorithm.h                    *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/





class QgsProcessingModelAlgorithm : QgsProcessingAlgorithm
{
%Docstring
 Model based algorithm with processing.
.. versionadded:: 3.0
%End

%TypeHeaderCode
#include "qgsprocessingmodelalgorithm.h"
%End
  public:

    class ChildParameterSource
{
%Docstring
 Source for the value of a parameter for a child algorithm within a model.
.. versionadded:: 3.0
%End

%TypeHeaderCode
#include "qgsprocessingmodelalgorithm.h"
%End
      public:

        enum Source
        {
          ModelParameter,
          ChildOutput,
          StaticValue,
        };

        ChildParameterSource();
%Docstring
 Constructor for ChildParameterSource. It is recommended that the static methods
 fromStaticValue(), fromModelParameter() and fromChildOutput() are used instead.
%End

        static QgsProcessingModelAlgorithm::ChildParameterSource fromStaticValue( const QVariant &value );
%Docstring
 Returns a new ChildParameterSource which takes its value from a static ``value``.
.. seealso:: fromModelParameter()
.. seealso:: fromChildOutput()
 :rtype: QgsProcessingModelAlgorithm.ChildParameterSource
%End

        static QgsProcessingModelAlgorithm::ChildParameterSource fromModelParameter( const QString &parameterName );
%Docstring
 Returns a new ChildParameterSource which takes its value from a parent model parameter.
.. seealso:: fromStaticValue()
.. seealso:: fromChildOutput()
 :rtype: QgsProcessingModelAlgorithm.ChildParameterSource
%End

        static QgsProcessingModelAlgorithm::ChildParameterSource fromChildOutput( const QString &childId, const QString &outputName );
%Docstring
 Returns a new ChildParameterSource which takes its value from an output generated by a child algorithm.
.. seealso:: fromStaticValue()
.. seealso:: fromModelParameter()
 :rtype: QgsProcessingModelAlgorithm.ChildParameterSource
%End

        Source source() const;
%Docstring
 Returns the parameter value's source.
 :rtype: Source
%End

        QVariant staticValue() const;
%Docstring
 Returns the source's static value. This is only used when the source() is StaticValue.
.. seealso:: setStaticValue()
 :rtype: QVariant
%End

        void setStaticValue( const QVariant &value );
%Docstring
 Sets the source's static value. Calling this will also change the source() to StaticValue.
.. seealso:: staticValue()
%End

        QString parameterName() const;
%Docstring
 Returns the source's model parameter name. This is only used when the source() is ModelParameter.
.. seealso:: setParameterName()
 :rtype: str
%End

        void setParameterName( const QString &name );
%Docstring
 Sets the source's model parameter ``name``. Calling this will also change the source() to ModelParameter.
.. seealso:: parameterName()
%End

        QString outputChildId() const;
%Docstring
 Returns the source's child algorithm ID from which the output value will be taken. This is only used when the source() is ChildOutput.
.. seealso:: setOutputChildId()
.. seealso:: outputName()
 :rtype: str
%End

        void setOutputChildId( const QString &id );
%Docstring
 Sets the source's child algorithm ``id`` from which the output value will be taken. Calling this will also change the source() to ChildOutput.
.. seealso:: parameterName()
.. seealso:: setOutputName()
%End

        QString outputName() const;
%Docstring
 Returns the source's child algorithm output name from which the output value will be taken. This is only used when the source() is ChildOutput.
.. seealso:: setOutputName()
.. seealso:: outputChildId()
 :rtype: str
%End

        void setOutputName( const QString &name );
%Docstring
 Sets the source's child algorithm output ``name`` from which the output value will be taken. Calling this will also change the source() to ChildOutput.
.. seealso:: outputName()
.. seealso:: setOutputChildId()
%End

    };

    class ChildAlgorithm
{
%Docstring
 Child algorithm representing a single component of a QgsProcessingModelAlgorithm.
.. versionadded:: 3.0
%End

%TypeHeaderCode
#include "qgsprocessingmodelalgorithm.h"
%End
      public:

        ChildAlgorithm( const QString &algorithmId = QString() );
%Docstring
 Constructor for ChildAlgorithm. The ``algorithmId`` parameter
 should be set to a QgsProcessingAlgorithm algorithm ID.
%End

        QString childId() const;
%Docstring
 Returns the child algorithm's unique ID string, used the identify
 this child algorithm within its parent model.
.. seealso:: setChildId()
.. seealso:: generateChildId()
 :rtype: str
%End

        void setChildId( const QString &id );
%Docstring
 Sets the child algorithm's unique ``id`` string, used the identify
 this child algorithm within its parent model.
.. seealso:: childId()
.. seealso:: generateChildId()
%End

        void generateChildId( const QgsProcessingModelAlgorithm &model );
%Docstring
 Automatically generates a unique childId() for the algorithm,
 avoiding child IDs which are already present in ``model``.
.. seealso:: childId()
.. seealso:: setChildId()
%End

        QString algorithmId() const;
%Docstring
 Returns the underlying child algorithm's ID.
.. seealso:: algorithm()
.. seealso:: setAlgorithmId()
 :rtype: str
%End

        void setAlgorithmId( const QString &algorithmId );
%Docstring
 Sets the underlying child algorithm's ID. This
 should be set to an existing QgsProcessingAlgorithm algorithm ID.
.. seealso:: algorithm()
.. seealso:: algorithmId()
%End

        const QgsProcessingAlgorithm *algorithm() const;
%Docstring
 Returns the underlying child algorithm, or a None
 if a matching algorithm is not available.
.. seealso:: algorithmId()
 :rtype: QgsProcessingAlgorithm
%End

        QString description() const;
%Docstring
 Returns the friendly description text for the child algorithm.
.. seealso:: setDescription()
 :rtype: str
%End

        void setDescription( const QString &description );
%Docstring
 Sets the friendly ``description`` text for the child algorithm.
.. seealso:: description()
%End

        QMap< QString, QgsProcessingModelAlgorithm::ChildParameterSource > parameterSources() const;
%Docstring
 Returns a map of parameter sources. The keys are the child algorithm
 parameter names, the values are the source for that parameter.
.. seealso:: setParameterSources()
.. seealso:: addParameterSource()
 :rtype: QMap< str, QgsProcessingModelAlgorithm.ChildParameterSource >
%End

        void setParameterSources( const QMap< QString, QgsProcessingModelAlgorithm::ChildParameterSource > &sources );
%Docstring
 Sets the map of parameter ``sources``. The keys are the child algorithm
 parameter names, the values are the source for that parameter.
.. seealso:: parameterSources()
.. seealso:: addParameterSource()
%End

        void addParameterSource( const QString &name, const QgsProcessingModelAlgorithm::ChildParameterSource &source );
%Docstring
 Adds a parameter source. The ``name`` argument should match
 one of the child algorithm's parameter names, and the ``source``
 argument is used to set the source for that parameter.

 Any existing parameter source with matching name will be replaced.
.. seealso:: parameterSources()
.. seealso:: setParameterSources()
%End

        bool isActive() const;
%Docstring
 Returns true if the child algorithm is active.
.. seealso:: setActive()
 :rtype: bool
%End

        void setActive( bool active );
%Docstring
 Sets whether the child algorithm is active.
.. seealso:: isActive()
%End

        QPointF position() const;
%Docstring
 Returns the position of the child algorithm within the graphical modeler.
.. seealso:: setPosition()
 :rtype: QPointF
%End

        void setPosition( const QPointF &position );
%Docstring
 Sets the ``position`` of the child algorithm within the graphical modeler.
.. seealso:: position()
%End

        QStringList dependencies() const;
%Docstring
 Returns the list of child algorithms from the parent model on which this
 algorithm is dependent. The returned list contains the id() of the
 dependent algorithms.
.. seealso:: setDependencies()
 :rtype: list of str
%End

        void setDependencies( const QStringList &dependencies );
%Docstring
 Sets the list of child algorithms from the parent model on which this
 algorithm is dependent. The list should contain the id() of the
 dependent algorithms.
.. seealso:: dependencies()
%End

        bool parametersCollapsed() const;
%Docstring
 Returns true if the list of parameters for this algorithm should be collapsed
 in the graphical modeller.
.. seealso:: setParametersCollapsed()
.. seealso:: outputsCollapsed()
 :rtype: bool
%End

        void setParametersCollapsed( bool collapsed );
%Docstring
 Sets whether the list of parameters for this algorithm should be collapsed
 in the graphical modeller.
.. seealso:: parametersCollapsed()
.. seealso:: setOutputsCollapsed()
%End

        bool outputsCollapsed() const;
%Docstring
 Returns true if the list of outputs for this algorithm should be collapsed
 in the graphical modeller.
.. seealso:: setParametersCollapsed()
.. seealso:: parametersCollapsed()
 :rtype: bool
%End

        void setOutputsCollapsed( bool collapsed );
%Docstring
 Sets whether the list of outputs for this algorithm should be collapsed
 in the graphical modeller.
.. seealso:: outputsCollapsed()
.. seealso:: setParametersCollapsed()
%End

    };

    QgsProcessingModelAlgorithm( const QString &name = QString(), const QString &group = QString() );
%Docstring
 Constructor for QgsProcessingModelAlgorithm.
%End

    virtual QString name() const;

    virtual QString displayName() const;

    virtual QString group() const;

    virtual QIcon icon() const;

    virtual QString svgIconPath() const;


    virtual bool canExecute( QString *errorMessage /Out/ = 0 ) const;

     virtual QVariantMap processAlgorithm( const QVariantMap &parameters,
                                  QgsProcessingContext &context, QgsProcessingFeedback *feedback ) const;

    QMap<QString, QgsProcessingModelAlgorithm::ChildAlgorithm> childAlgorithms() const;
%Docstring
 Returns the map of child algorithms contained in the model. The keys
 are the child algorithm ids (see QgsProcessingModelAlgorithm.ChildAlgorithm.childId()).
.. seealso:: childAlgorithm()
.. seealso:: setChildAlgorithms()
.. seealso:: addChildAlgorithm()
 :rtype: QMap<str, QgsProcessingModelAlgorithm.ChildAlgorithm>
%End

    void setChildAlgorithms( const QMap<QString, QgsProcessingModelAlgorithm::ChildAlgorithm> &childAlgorithms );
%Docstring
 Sets the map of child algorithms contained in the model. The keys
 are the child algorithm ids (see QgsProcessingModelAlgorithm.ChildAlgorithm.childId()).
 All existing child algorithms will be replaced.
.. seealso:: childAlgorithms()
.. seealso:: childAlgorithm()
.. seealso:: addChildAlgorithm()
%End

    QString addChildAlgorithm( QgsProcessingModelAlgorithm::ChildAlgorithm &algorithm );
%Docstring
 Adds a new child ``algorithm`` to the model. If a child algorithm already exists
 in the model with the same child ID then ``algorithm`` will be assigned a new
 autogenerated unique ID.
 The assigned child ID will be returned.
.. seealso:: childAlgorithms()
.. seealso:: childAlgorithm()
.. seealso:: setChildAlgorithms()
 :rtype: str
%End

    QgsProcessingModelAlgorithm::ChildAlgorithm &childAlgorithm( const QString &id );
%Docstring
 Returns the child algorithm with matching ``id``. If no child algorithm exists with
 this ID a new algorithm will be added to the model and returned.
.. seealso:: addChildAlgorithm()
.. seealso:: childAlgorithms()
 :rtype: QgsProcessingModelAlgorithm.ChildAlgorithm
%End


    QStringList dependentChildAlgorithms( const QString &childId ) const;
%Docstring
 :rtype: list of str
%End

};



/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/processing/qgsprocessingmodelalgorithm.h                    *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
